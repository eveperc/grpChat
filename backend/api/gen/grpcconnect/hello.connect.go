// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: hello.proto

package grpcconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	grpc "gRPChat/api/gen"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GreetingServiceName is the fully-qualified name of the GreetingService service.
	GreetingServiceName = "myapp.GreetingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetingServiceHelloProcedure is the fully-qualified name of the GreetingService's Hello RPC.
	GreetingServiceHelloProcedure = "/myapp.GreetingService/Hello"
)

// GreetingServiceClient is a client for the myapp.GreetingService service.
type GreetingServiceClient interface {
	Hello(context.Context, *connect_go.Request[grpc.HelloRequest]) (*connect_go.Response[grpc.HelloResponse], error)
}

// NewGreetingServiceClient constructs a client for the myapp.GreetingService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GreetingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greetingServiceClient{
		hello: connect_go.NewClient[grpc.HelloRequest, grpc.HelloResponse](
			httpClient,
			baseURL+GreetingServiceHelloProcedure,
			opts...,
		),
	}
}

// greetingServiceClient implements GreetingServiceClient.
type greetingServiceClient struct {
	hello *connect_go.Client[grpc.HelloRequest, grpc.HelloResponse]
}

// Hello calls myapp.GreetingService.Hello.
func (c *greetingServiceClient) Hello(ctx context.Context, req *connect_go.Request[grpc.HelloRequest]) (*connect_go.Response[grpc.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// GreetingServiceHandler is an implementation of the myapp.GreetingService service.
type GreetingServiceHandler interface {
	Hello(context.Context, *connect_go.Request[grpc.HelloRequest]) (*connect_go.Response[grpc.HelloResponse], error)
}

// NewGreetingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetingServiceHandler(svc GreetingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(GreetingServiceHelloProcedure, connect_go.NewUnaryHandler(
		GreetingServiceHelloProcedure,
		svc.Hello,
		opts...,
	))
	return "/myapp.GreetingService/", mux
}

// UnimplementedGreetingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetingServiceHandler struct{}

func (UnimplementedGreetingServiceHandler) Hello(context.Context, *connect_go.Request[grpc.HelloRequest]) (*connect_go.Response[grpc.HelloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("myapp.GreetingService.Hello is not implemented"))
}
