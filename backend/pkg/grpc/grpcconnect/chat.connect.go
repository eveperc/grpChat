// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chat.proto

package grpcconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	grpc "gRPChat/pkg/grpc"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "myapp.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceJoinProcedure is the fully-qualified name of the ChatService's join RPC.
	ChatServiceJoinProcedure = "/myapp.ChatService/join"
	// ChatServiceSendMsgProcedure is the fully-qualified name of the ChatService's sendMsg RPC.
	ChatServiceSendMsgProcedure = "/myapp.ChatService/sendMsg"
	// ChatServiceReceiveMsgProcedure is the fully-qualified name of the ChatService's receiveMsg RPC.
	ChatServiceReceiveMsgProcedure = "/myapp.ChatService/receiveMsg"
	// ChatServiceGetAllUsersProcedure is the fully-qualified name of the ChatService's getAllUsers RPC.
	ChatServiceGetAllUsersProcedure = "/myapp.ChatService/getAllUsers"
)

// ChatServiceClient is a client for the myapp.ChatService service.
type ChatServiceClient interface {
	Join(context.Context, *connect_go.Request[grpc.User]) (*connect_go.Response[grpc.JoinResponse], error)
	SendMsg(context.Context, *connect_go.Request[grpc.ChatMessage]) (*connect_go.Response[grpc.Empty], error)
	ReceiveMsg(context.Context, *connect_go.Request[grpc.Empty]) (*connect_go.ServerStreamForClient[grpc.ChatMessage], error)
	GetAllUsers(context.Context, *connect_go.Request[grpc.Empty]) (*connect_go.Response[grpc.UserList], error)
}

// NewChatServiceClient constructs a client for the myapp.ChatService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatServiceClient{
		join: connect_go.NewClient[grpc.User, grpc.JoinResponse](
			httpClient,
			baseURL+ChatServiceJoinProcedure,
			opts...,
		),
		sendMsg: connect_go.NewClient[grpc.ChatMessage, grpc.Empty](
			httpClient,
			baseURL+ChatServiceSendMsgProcedure,
			opts...,
		),
		receiveMsg: connect_go.NewClient[grpc.Empty, grpc.ChatMessage](
			httpClient,
			baseURL+ChatServiceReceiveMsgProcedure,
			opts...,
		),
		getAllUsers: connect_go.NewClient[grpc.Empty, grpc.UserList](
			httpClient,
			baseURL+ChatServiceGetAllUsersProcedure,
			opts...,
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	join        *connect_go.Client[grpc.User, grpc.JoinResponse]
	sendMsg     *connect_go.Client[grpc.ChatMessage, grpc.Empty]
	receiveMsg  *connect_go.Client[grpc.Empty, grpc.ChatMessage]
	getAllUsers *connect_go.Client[grpc.Empty, grpc.UserList]
}

// Join calls myapp.ChatService.join.
func (c *chatServiceClient) Join(ctx context.Context, req *connect_go.Request[grpc.User]) (*connect_go.Response[grpc.JoinResponse], error) {
	return c.join.CallUnary(ctx, req)
}

// SendMsg calls myapp.ChatService.sendMsg.
func (c *chatServiceClient) SendMsg(ctx context.Context, req *connect_go.Request[grpc.ChatMessage]) (*connect_go.Response[grpc.Empty], error) {
	return c.sendMsg.CallUnary(ctx, req)
}

// ReceiveMsg calls myapp.ChatService.receiveMsg.
func (c *chatServiceClient) ReceiveMsg(ctx context.Context, req *connect_go.Request[grpc.Empty]) (*connect_go.ServerStreamForClient[grpc.ChatMessage], error) {
	return c.receiveMsg.CallServerStream(ctx, req)
}

// GetAllUsers calls myapp.ChatService.getAllUsers.
func (c *chatServiceClient) GetAllUsers(ctx context.Context, req *connect_go.Request[grpc.Empty]) (*connect_go.Response[grpc.UserList], error) {
	return c.getAllUsers.CallUnary(ctx, req)
}

// ChatServiceHandler is an implementation of the myapp.ChatService service.
type ChatServiceHandler interface {
	Join(context.Context, *connect_go.Request[grpc.User]) (*connect_go.Response[grpc.JoinResponse], error)
	SendMsg(context.Context, *connect_go.Request[grpc.ChatMessage]) (*connect_go.Response[grpc.Empty], error)
	ReceiveMsg(context.Context, *connect_go.Request[grpc.Empty], *connect_go.ServerStream[grpc.ChatMessage]) error
	GetAllUsers(context.Context, *connect_go.Request[grpc.Empty]) (*connect_go.Response[grpc.UserList], error)
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ChatServiceJoinProcedure, connect_go.NewUnaryHandler(
		ChatServiceJoinProcedure,
		svc.Join,
		opts...,
	))
	mux.Handle(ChatServiceSendMsgProcedure, connect_go.NewUnaryHandler(
		ChatServiceSendMsgProcedure,
		svc.SendMsg,
		opts...,
	))
	mux.Handle(ChatServiceReceiveMsgProcedure, connect_go.NewServerStreamHandler(
		ChatServiceReceiveMsgProcedure,
		svc.ReceiveMsg,
		opts...,
	))
	mux.Handle(ChatServiceGetAllUsersProcedure, connect_go.NewUnaryHandler(
		ChatServiceGetAllUsersProcedure,
		svc.GetAllUsers,
		opts...,
	))
	return "/myapp.ChatService/", mux
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) Join(context.Context, *connect_go.Request[grpc.User]) (*connect_go.Response[grpc.JoinResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("myapp.ChatService.join is not implemented"))
}

func (UnimplementedChatServiceHandler) SendMsg(context.Context, *connect_go.Request[grpc.ChatMessage]) (*connect_go.Response[grpc.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("myapp.ChatService.sendMsg is not implemented"))
}

func (UnimplementedChatServiceHandler) ReceiveMsg(context.Context, *connect_go.Request[grpc.Empty], *connect_go.ServerStream[grpc.ChatMessage]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("myapp.ChatService.receiveMsg is not implemented"))
}

func (UnimplementedChatServiceHandler) GetAllUsers(context.Context, *connect_go.Request[grpc.Empty]) (*connect_go.Response[grpc.UserList], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("myapp.ChatService.getAllUsers is not implemented"))
}
